
import Catlib4.Algebra.Ring

import Catlib4.Category.Category

structure VectStructure (K : Field) where
  Œ± : Type u
  add : Œ± ‚Üí Œ± ‚Üí Œ±
  neg : Œ± ‚Üí Œ±
  zero : Œ±
  smul : K ‚Üí Œ± ‚Üí Œ±

instance {K : Field} : CoeSort (VectStructure K) (Type u) where
  coe M := M.Œ±

instance {K : Field} (M : VectStructure K) : Add M where
  add := M.add

instance {K : Field} (M : VectStructure K) : Neg M where
  neg := M.neg

instance {K : Field} (M : VectStructure K) : SMul K M where
  smul := M.smul

instance {K : Field} (M : VectStructure K) : OfNat M (nat_lit 0) where
  ofNat := M.zero

structure VectorSpace (K : Field) extends VectStructure K where
  add_zero : ‚àÄ x : Œ±, x + 0 = x
  zero_add : ‚àÄ x : Œ±, 0 + x = x
  add_assoc : ‚àÄ x y z : Œ±, x + (y + z) = x + y + z
  add_comm : ‚àÄ x y : Œ±, x + y = y + x
  add_neg : ‚àÄ x : Œ±, x + -x = 0
  smul_smul : ‚àÄ x y : K, ‚àÄ z : Œ±, x ‚Ä¢ y ‚Ä¢ z = (x * y) ‚Ä¢ z
  smul_add : ‚àÄ x : K, ‚àÄ y z : Œ±, x ‚Ä¢ (y + z) = x ‚Ä¢ y + x ‚Ä¢ z
  smul_zero : ‚àÄ x : K, x ‚Ä¢ (0 : Œ±) = 0
  add_smul : ‚àÄ x y : K, ‚àÄ z : Œ±, (x + y) ‚Ä¢ z = x ‚Ä¢ z + y ‚Ä¢ z
  zero_smul : ‚àÄ x : Œ±, (0 : K) ‚Ä¢ x = 0
  one_smul : ‚àÄ x : Œ±, (1 : K) ‚Ä¢ x = x

instance {K : Field} : CoeSort (VectorSpace K) (Type u) where
  coe V := V.Œ±

section

variable {K : Field} (V : VectorSpace K)

attribute [simp] VectorSpace.add_zero
attribute [simp] VectorSpace.zero_add
attribute [simp] VectorSpace.add_assoc
-- attribute [simp] VectorSpace.add_comm -- Don't @[simp]: causes infinite loops!
attribute [simp‚Üì] VectorSpace.add_neg
attribute [simp] VectorSpace.smul_smul
attribute [simp] VectorSpace.smul_add
attribute [simp] VectorSpace.smul_zero
attribute [simp] VectorSpace.add_smul
attribute [simp] VectorSpace.zero_smul
attribute [simp] VectorSpace.one_smul

@[simp] theorem VectorSpace.neg_eq_neg_one_smul : ‚àÄ u : V, -u = -(1 : K) ‚Ä¢ u := by
  sorry

@[simp] theorem VectorSpace.add_mul_neg_one :
  ‚àÄ x : V, x + (-1 : K) ‚Ä¢ x = 0 :=
  Œª _ => neg_eq_neg_one_smul _ _ ‚ñ∏ add_neg _ _

@[simp] theorem VectorSpace.smul_add_neg_one_mul_smul :
  ‚àÄ x : V, ‚àÄ Œº : K, Œº ‚Ä¢ x + ((-1) * Œº) ‚Ä¢ x = 0 :=
  Œª _ _ => (smul_smul _ _ _ _) ‚ñ∏ add_mul_neg_one _ _

theorem VectorSpace.eq_of_sum_zero :
  ‚àÄ x y : V, x + -y = 0 ‚Üí x = y := sorry

end

structure LinearMap {K : Field} (V W : VectorSpace K) where
  f : V ‚Üí W
  map_smul : ‚àÄ Œº : K, ‚àÄ v : V, f (Œº ‚Ä¢ v) = Œº ‚Ä¢ f v
  map_add : ‚àÄ v w : V, f (v + w) = f v + f w

section

variable {K : Field} {V W : VectorSpace K}

instance : CoeFun (LinearMap V W) (fun _ => V ‚Üí W) where
  coe f := f.f

attribute [simp] LinearMap.map_smul
attribute [simp] LinearMap.map_add

theorem LinearMap.eq :
  ‚àÄ {f g : LinearMap V W}, f.f = g.f ‚Üí f = g
  | ‚ü® _, _, _ ‚ü©, ‚ü® _, _, _ ‚ü©, rfl => rfl

theorem LinearMap.ext : ‚àÄ {f g : LinearMap V W}, (‚àÄ x, f x = g x) ‚Üí f = g :=
  LinearMap.eq ‚àò funext

theorem LinearMap.congrFun : ‚àÄ {f g : LinearMap V W}, f = g ‚Üí ‚àÄ x, f x = g x :=
  Œª h _ => h ‚ñ∏ rfl

variable (f : LinearMap V W)

@[simp] theorem LinearMap.map_zero : f 0 = 0 := by
  sorry

@[simp] theorem LinearMap.map_neg : ‚àÄ x, f (-x) = - f x := by
  sorry

@[simp] theorem LinearMap.map_neg_one_smul : ‚àÄ x, f ((-1 : K) ‚Ä¢ x) = (-1 : K) ‚Ä¢ f x := by
  sorry

end

def LinearMap.identity {K : Field} (V : VectorSpace K) : LinearMap V V where
  f x := x
  map_smul := by simp
  map_add := by simp

def LinearMap.zero {K : Field} (U V : VectorSpace K) : LinearMap U V where
  f _ := 0
  map_smul := by simp
  map_add := by simp

def LinearMap.compose {K : Field} {U V W : VectorSpace K}
  (f : LinearMap V W) (g : LinearMap U V) : LinearMap U W where
  f := f ‚àò g
  map_smul := by simp
  map_add := by simp

def KVect (K : Field) : CategoryTheory.Category where
  Œ± := VectorSpace K
  hom V W := LinearMap V W
  id := LinearMap.identity
  comp f g := LinearMap.compose g f
  id_comp' := by intros; rfl
  comp_id' := by intros; rfl
  assoc' := by intros; rfl

instance (K : Field) : HasHom (VectorSpace K) := inferInstanceAs (HasHom (KVect K))
instance (K : Field) : HasIdentity (VectorSpace K) := inferInstanceAs (HasIdentity (KVect K))
instance (K : Field) : HasComp (VectorSpace K) := inferInstanceAs (HasComp (KVect K))

instance {K : Field} : CoeSort (KVect K) (Type u) := inferInstanceAs (CoeSort (VectorSpace K) (Type u))

instance {K : Field} (V W : KVect K) : CoeFun (V ‚ü∂ W) (fun _ => V ‚Üí W) where
  coe f := f.f

def hom_space {K : Field} (V W : KVect K) : VectorSpace K where
  Œ± := V ‚ü∂ W
  add := Œª ‚ü® f, p, q ‚ü© ‚ü® g, p', q' ‚ü© =>
    ‚ü® Œª x => f x + g x
    , by simp [p, q, p', q']
    , by
      intro v w
      suffices r : f v + f w + g v + g w = f v + g v + f w + g w by
        simp [p, q, p', q', r]
      rw [‚Üê W.add_assoc (f v) (g v), W.add_comm (g v) (f w), W.add_assoc] ‚ü©
  neg := Œª ‚ü® f, p, q ‚ü© =>
    ‚ü® Œª x => - f x
    , by simp [p, q, K.mul_comm (-1)]
    , by simp [p, q] ‚ü©
  zero := ‚ü® Œª _ => 0, by simp, by simp ‚ü©
  smul := Œª Œº ‚ü® f, p, q ‚ü© =>
    ‚ü® Œª x => Œº ‚Ä¢ f x
    , by intro ŒΩ v; simp [p, q, K.mul_comm Œº ŒΩ]
    , by simp [p, q] ‚ü©
  add_zero _ := by
    apply LinearMap.ext
    exact Œª _ => W.add_zero _
  zero_add _ := by
    apply LinearMap.ext
    exact Œª _ => W.zero_add _
  add_assoc _ _ _ := by
    apply LinearMap.ext
    exact Œª _ => W.add_assoc _ _ _
  add_comm _ _ := by
    apply LinearMap.ext
    exact Œª _ => W.add_comm _ _
  add_neg _ := by
    apply LinearMap.ext
    exact Œª _ => W.add_neg _
  smul_smul _ _ _ := by
    apply LinearMap.ext
    exact Œª _ => W.smul_smul _ _ _
  smul_add _ _ _ := by
    apply LinearMap.ext
    exact Œª _ => W.smul_add _ _ _
  smul_zero _ := by
    apply LinearMap.ext
    exact Œª _ => W.smul_zero _
  add_smul _ _ _ := by
    apply LinearMap.ext
    exact Œª _ => W.add_smul _ _ _
  zero_smul _ := by
    apply LinearMap.ext
    exact Œª _ => W.zero_smul _
  one_smul _ := by
    apply LinearMap.ext
    exact Œª _ => W.one_smul _

instance {K : Field} (V W : KVect K) : Add (V ‚ü∂ W)
  := inferInstanceAs (Add (hom_space V W))
instance {K : Field} (V W : KVect K) : Neg (V ‚ü∂ W)
  := inferInstanceAs (Neg (hom_space V W))
instance {K : Field} (V W : KVect K) : SMul K (V ‚ü∂ W)
  := inferInstanceAs (SMul K (hom_space V W))
instance {K : Field} (V W : KVect K) : OfNat (V ‚ü∂ W) (nat_lit 0)
  := inferInstanceAs (OfNat (hom_space V W) (nat_lit 0))

instance {K : Field} (V : KVect K) : OfNat (V ‚ü∂ V) (nat_lit 1) where
  ofNat := LinearMap.identity V

@[simp] theorem LinearMap.identity_val {K : Field} {U : KVect K} (x : U) :
  ùüô U x = x := rfl

@[simp] theorem LinearMap.zero_val {K : Field} {U : KVect K} (x : U) (V : KVect K) :
  (0 : U ‚ü∂ V) x = 0 := rfl

@[simp] theorem LinearMap.compose_val {K : Field} {U V W : KVect K}
  (f : V ‚ü∂ W) (g : U ‚ü∂ V) (x : U) : (g ‚â´ f) x = f (g x) := rfl
